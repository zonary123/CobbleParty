plugins {
    // The shadow gradle plugin assists with repackaging a 3rd-party library jar within your own jar
    // In addition to ensuring that your end-users have the library available when they use your own thing,
    // it also helps avoid collisions with other things that are also using the same library.
    // ref: https://gist.github.com/SizableShrimp/949e7c219bfc94487a45226b64ac7749
    //
    // Latest Test Compatibility: gradle version 8.x shadow version 8.0.0+
    // ref: https://github.com/johnrengelman/shadow
    id "com.gradleup.shadow" version "8.3.5"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    // Loom sets the log4j config while in development (in prod the log4j config might be dictated by the launcher or just the game itself).
    // This loom gradle config specifies that loom uses our customized log4j config file.
    // ref: https://fabricmc.net/wiki/documentation:fabric_loom
    // (although we're using the architectury fork of fabric loom, this config remains unchanged)
    log4jConfigs.from(file("../common/src/main/resources/log4j.xml"))
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    common.canBeResolved = true
    common.canBeConsumed = false
    shadowCommon.canBeResolved = true
    shadowCommon.canBeConsumed = false
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")
    modImplementation("dev.architectury:architectury-fabric:${project.architectury_version}")

    modImplementation("com.cobblemon:fabric:${property("cobblemon_version")}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand Map.of(
                "mod_name", project.property("mod_name"),
                "mod_id", project.property("mod_id"),
                "mod_version", project.property("mod_version"),
                "mod_description", project.property("mod_description"),
                "author", project.property("author"),
                "repository", project.property("repository"),
                "license", project.property("license"),
                "mod_icon", project.property("mod_icon"),
                "environment", project.property("environment"),
                "supported_minecraft_versions", project.property("supported_minecraft_versions")
        )
    }
}

shadowJar {
    exclude "architectury.common.json"


    configurations = [project.configurations.shadowCommon]
    // "classifier" is removed in gradle 8, use "archiveClassifier" instead
    // ref: https://github.com/architectury/architectury-api/blob/18ba59c9041d3fa535278097ee4b3d574dfec6d2/fabric/build.gradle#L48
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
